{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyPVpeHrYNeYsI8N0Gk+96V/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/anabeatriz453/Meus-Projetos/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A9nDsq1T0t1e",
        "outputId": "16d80097-bbe0-4214-d863-18112d062f40"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (2.32.3)\n",
            "Collecting python-docx\n",
            "  Downloading python_docx-1.1.2-py3-none-any.whl.metadata (2.0 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests) (2025.1.31)\n",
            "Requirement already satisfied: lxml>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from python-docx) (5.3.2)\n",
            "Requirement already satisfied: typing-extensions>=4.9.0 in /usr/local/lib/python3.11/dist-packages (from python-docx) (4.13.1)\n",
            "Downloading python_docx-1.1.2-py3-none-any.whl (244 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m244.3/244.3 kB\u001b[0m \u001b[31m2.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: python-docx\n",
            "Successfully installed python-docx-1.1.2\n"
          ]
        }
      ],
      "source": [
        "!pip install requests python-docx"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests  # Biblioteca para fazer requisições HTTP\n",
        "from docx import Document  # Biblioteca para manipular arquivos do Word\n",
        "import os  # Biblioteca para funcionalidades do sistema operacional\n",
        "\n",
        "subscription_key =\"SUBSCRIPTION_KEY\"  # Chave de assinatura para acessar a API.\n",
        "endpoint = \"https://api.cognitive.microsofttranslator.com\"  # URL base da API do Microsoft Translator.\n",
        "location = \"eastus2\"  # Região do serviço na nuvem.\n",
        "target_language = \"pt-br\"  # Idioma de destino para a tradução.\n",
        "\n",
        "def translator_text(text, target_language): # Esta função recebe um texto em inglês e o traduz para o idioma especificado.\n",
        "    path = \"/translate\"  # Define o caminho específico para tradução dentro da API.\n",
        "    constructed_url = endpoint + path  #Cria a URL completa para requisição.\n",
        "\n",
        "    headers = {\n",
        "        \"Ocp-Apim-Subscription-Key\": subscription_key,  # Autentica a solicitação com a chave de assinatura.\n",
        "        \"Ocp-Apim-Subscription-Region\": location,  # Especifica a região da API.\n",
        "        \"Content-type\": \"application/json\",   # Define o tipo de conteúdo da requisição como JSON.\n",
        "        \"X-ClientTraceId\": str(os.urandom(16))  # Gera um identificador aleatório para rastrear a requisição.\n",
        "    }\n",
        "\n",
        "    body = [{\"text\": text}]  # Contém o texto a ser traduzido dentro de uma lista de dicionário.\n",
        "\n",
        "    params = {\n",
        "        \"api-version\": \"3.0\",  # Define a versão da API usada.\n",
        "        \"from\": \"en\",  # Idioma de origem do texto (\"en\" para inglês).\n",
        "        \"to\": target_language  # Idioma de destino (target_language, que é \"pt-br\" no código)\n",
        "    }\n",
        "\n",
        "    request = requests.post(constructed_url, params=params, headers=headers, json=body) # Usa para enviar os dados à API.\n",
        "    response = request.json()  # Recebe a resposta da API e a transforma em JSON\n",
        "    return response[0][\"translations\"][0][\"text\"]  #Acessa o primeiro elemento da resposta e extrai o texto traduzido.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "XxORDDhf1l2p"
      },
      "execution_count": 20,
      "outputs": []
    }
  ]
}
